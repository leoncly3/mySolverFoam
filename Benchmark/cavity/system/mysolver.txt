#include "fvCFD.H"

int main(int argc, char *argv[])
{
    #include "setRootCase.H"//必备
    #include "createTime.H"//创建时间对象
    #include "createMesh.H"//创建mesh
    #include "createFields.H"//创建场，初始条件和系数

    Info << "Starting time loop\n";//输入“开始时间循环”

    while (runTime.loop())
    {
        Info << "Time = " << runTime.timeName() << nl << endl;//输入当前时刻

        volScalarField df_chem_dc
        (
            IOobject
            (
                "df_chem_dc",
                runTime.timeName(),
                mesh,
                IOobject::NO_READ,
                IOobject::NO_WRITE
            ),
            mesh,
            dimensionSet(0,0,0,0,0,0,0)
        );

        df_chem_dc = 2*Q_s*((c - c_alpha)*(pow(c_beta - c, 2)) - (pow(c - c_alpha, 2))*(c_beta - c));//化学能偏导

        fvScalarMatrix cEqn//方程
        (
            fvm::ddt(c)
          == fvm::laplacian(M*(fvc::grad(df_chem_dc) - kappa*fvc::laplacian(c)), c)
        );

        runTime.write();
    }

    Info << "End\n";

    return 0;
}


第一个问题： error: ‘argc’ was not declared in this scope; did you mean ‘args’?
修改include库的位置 新的问题出现为：
createFields.H: In function ‘int main(int, char**)’:
createFields.H:11:1: error: a function-definition is not allowed here before ‘{’ token
   11 | {
      | ^
createFields.H:22:9: warning: empty parentheses were disambiguated as a function declaration [-Wvexing-parse]
   22 | int main()
      |         ^~
createFields.H:22:9: note: remove parentheses to default-initialize a variable
   22 | int main()
      |         ^~
      |         --
createFields.H:22:9: note: or replace parentheses with braces to value-initialize a variable
createFields.H:23:1: error: a function-definition is not allowed here before ‘{’ token
   23 | {
      | ^
mySolver.C:39:5: error: ‘runTime’ is not a class, namespace, or enumeration
   39 |     runTime::init(argc, argv); // 初始化runTime对象
      |     ^~~~~~~
mySolver.C:60:30: error: ‘c’ was not declared in this scope; did you mean ‘Foam::constant::universal::c’?
   60 |         df_chem_dc = 2*Q_s*((c - c_alpha)*(pow(c_beta - c, 2)) - (pow(c - c_alpha, 2))*(c_beta - c));
      |                              ^
      |                              Foam::constant::universal::c
In file included from /home/cxy/OpenFOAM/OpenFOAM-9/src/OpenFOAM/lnInclude/constants.H:41,
                 from /home/cxy/OpenFOAM/OpenFOAM-9/src/finiteVolume/lnInclude/fvCFD.H:23,
                 from mySolver.C:30:
/home/cxy/OpenFOAM/OpenFOAM-9/src/OpenFOAM/lnInclude/fundamentalConstants.H:46:36: note: ‘Foam::constant::universal::c’ declared here
   46 |     extern const dimensionedScalar c;
      |                                    ^
make: *** [/home/cxy/OpenFOAM/OpenFOAM-9/wmake/rules/General/transform:26: Make/linux64GccDPInt32Opt/mySolver.o] Error 1

对比icoFoam的creatFields.H文件进行重新编写，仿照其重新编写：
其标量仿照书上内容为：
dimensionedScalar epsilon
(
    "epsilon",
    physicalProperties.lookup("epsilon")
);
需要先定义字典对象physicalProperties
c是变量，定义方式不同；
Info<< "Reading field c\n" << endl;
volScalarField c
(
    IOobject
    (
        "c",
        runTime.timeName(),
        mesh,
        IOobject::MUST_READ,
        IOobject::AUTO_WRITE
    ),
    mesh,
    c = c_0 + epsilon * (
    cos(0.105*x)*cos(0.11*y) +
    pow(cos(0.13*x)*cos(0.087*y), 2) +
    cos(0.025*x-0.15*y)*cos(0.07*x-0.02*y)
);

修改过后问题更行了，首先是concentration，x，y没有declared
因此需要赋值x和y的坐标 使用mesh.C()[0]
scalar x = mesh.C()[0];向量的第一元素赋值到x
因此在代码前加上这一段：
scalar x = mesh.C()[0]；
scalar y = mesh.C()[1]

接下来的问题是include createFields.H的时候出问题了，
dimensionedScalar Q_s("Q_s", dimensionSet(0,0,0,0,0,0,0), 5.0);
需要注意dimensionScalar后面需要加上Q s不然无法识别

接下来就可以编译了
rm -r linux64GccDPInt32Opt
删除命令


boundary里设置patch和blockMeshDict里设置patch意义不一样 一个是设置初始网格划分 一个是涉及到边界条件的设置

  frontAndBack
    {
        type            empty;
        inGroups        List<word> 1(empty);
        nFaces          200;
        startFace       220;
    }

type设置为empty是代表其无物理意义 一维二维的时候考虑设置为empty boundary文件中 无法设置无通量边界条件 这需要在0文件中设置 
并且设置为0通量边界条件应该用zeroGradient
  考虑cyclic为周期性边界条件

这是在0文件下设置其边界条件为周期性边界条件的方式：

left
{
    type            cyclic;
    neighbourPatch  right;
}

right
{
    type            cyclic;
    neighbourPatch  left;
}

bottom
{
    type            cyclic;
    neighbourPatch  top;
}

top
{
    type            cyclic;
    neighbourPatch  bottom;
}


scalarField c(mesh.nCells(), 0.0);
既初始化也声明了c 很好用的代码，其中scalarField c(mesh.nCells(), 0.);与scalarField c(mesh.nCells(), 0.0);
是一样的 涉及到浮点数


scalar x = mesh.C()[0];
scalar y = mesh.C()[1];


    c = c_0 + epsilon * (
    cos(0.105*x)*cos(0.11*y) +
    pow(cos(0.13*x)*cos(0.087*y), 2) +
    cos(0.025*x-0.15*y)*cos(0.07*x-0.02*y)


--> FOAM FATAL ERROR: 
LHS and RHS of - have different dimensions
     dimensions : [0 0 0 0 0 0 0] - [0 -2 0 0 0 0 0]
量纲不一致 减号左边右边量纲不一致 -2的位置是长度的问题  
从求解器里来看

我感觉是求解器出问题了，df-chem/dc应该用换元法换出u，然后再写个volscalarField，最后将u直接写进去，但是u里面也有laplacian，这个应该如何表达呢？
用户手册里面可以直接写，还需要再多看几个求解器

再设置一个u场？ u是换元 换掉的化学能的偏导减去一个拉普拉斯 里面也是含有c的，但是benchmark这个用不到添加场，因为这个是涉及到耦合 
温度场 耦合 别的场 

u中有c u和c相互影响，考虑耦合 采取迭代求解的方式 
#include "fvCFD.H"

int main(int argc, char *argv[])
{
    #include "setRootCase.H"
    #include "createTime.H"
    #include "createMesh.H"
    #include "createFields.H"

    Info<< "\nStarting time loop\n" << endl;

    for (runTime++; !runTime.end(); runTime++)
    {
        Info<< "Time = " << runTime.timeName() << endl;

        scalarField cOld = c;
        scalarField uOld = u;
        scalar tol = 1e-6; // 收敛标准

        bool converged = false;
        while (!converged)
        {
            // --- 解决 u = kappa * laplacian(c) ---
            solve
            (
                fvm::laplacian(kappa, c) == u
            );

            // --- 解决 dc/dt = div(M * grad(u)) ---
            solve
            (
                fvm::ddt(c) == fvm::div(M * fvc::grad(u))
            );

            // 判断收敛
            if ((c - cOld).magSqr() < tol && (u - uOld).magSqr() < tol)
                converged = true;
            else
            {
                cOld = c;
                uOld = u;
            }
        }

        runTime.write();

        Info<< "End of time step" << endl;
    }

    Info<< "End\n" << endl;

    return 0;
}
添加了一个scalar tol 来判断其收敛


考虑松弛因子，尤其c和u相关性很强 考虑内部迭代
不考虑PISO循环 这速度压力场耦合才需要的 扩散厂用不上这个 

如果是可以先求出c 再去求u 意思是耦合性没那么强的话 就不需要迭代过程 不需要迭代就直接写进去就行


之前写的耦合计算部分 需要改改
       volScalarField df_chem_dc
        (
            IOobject(
                "df_chem_dc",
                runTime.timeName(),
                mesh,
                IOobject::NO_READ,
                IOobject::NO_WRITE
            ),
            mesh,
            dimensionSet(0,0,0,0,0,0,0)
        );
 
        df_chem_dc = 2*Q_s*((c - c_alpha)*(pow(c_beta - c, 2)) - (pow(c - c_alpha, 2))*(c_beta - c));


        fvScalarMatrix uEqn//用于标量场
        (
            u == df_chem_dc - fvm::laplacian(kappa,c)
        );
        uEqn.solve();

        fvScalarMatrix cEqn//用于标量场
        (
            fvm::ddt(c) == fvm::laplacian(M,u)
        );
        cEqn.solve();

以后不用在主程序后写runTime.write();
可以直接#include write.H
if (runTime.writeTime())
    {
        runTime.write();
    }
都是一个效果，而且更方便


fvScheme里需要改的不多 都可以保持默认
fvSolutions里需要给出u场的求解方式 


量纲问题考虑两个点 一个是blockMeshDict里面的converToMeters 这个缩放系数会使其沾上单位（openfoam中如何定义无量纲几何图形）
第二个需要考虑的是从createFileds里定义场的时候定义其为无量纲（定义场的时候指定其量纲）



1：检查所有设置常数的dimension
所有的[ ]，从createFields到0文件 
更改了createFields里的常数定义方式 ，换为了
dimensionedScalar c_alpha
(
    myProperties.lookup("c_alpha")
);
之前在里面重复定义了一次量纲 重新编译一遍，没有问题 

接着检查c和u的量纲，这两个的量纲是读取0文件下的c和u(从文件中读取，内部场和边界场的初始值都由文件给定，边界条件也由文件给定)，因此检查那两个文件就行 
dimensions      [0 0 0 0 0 0 0];

***边界条件也许可以改下 试试周期性边界条件是否有所不同 cyclinc

修改了下#codeStream里的scalar c_0=0.5 改为const scalar c_0=0.5，把这些数全部申明为常量了 更加规范了 对结果应该没有太大的影响 

竟然出现新的问题了：
--> FOAM FATAL IO ERROR: 
wrong token type - expected word, found on line 23 the punctuation token '['

file: /home/cxy/OpenFOAM/cxy-9/run/Benchmark/cavity/constant/myProperties/c_alpha at line 23.

    From function Foam::Istream& Foam::operator>>(Foam::Istream&, Foam::word&)
    in file primitives/strings/word/wordIO.C at line 74.

FOAM exiting

已解决：除了icoFoam里的transportProperties是kappa                 [0 0 0 0 0 0 0] 2.0;
自己写的properties得这么写：kappa                kappa [0 0 0 0 0 0 0] 2.0;
后面还需要再重复下定义的数的名称 

问题又回到一开始，所以不是定义dimension的时候出的问题，还需继续排查

2：排查读取u、c初场时刻

SIMPLE: No convergence criteria found SIMPLE算法没有找到收敛标准 这个应该不影响量纲计算 
缺少的是residualControl子字典 
这个子字典关系稳态计算时的收敛判断误差 不是必须设置的部分 如果空缺的话SIMPLE算法将按照controlDict文件里的最大迭代次数进行模拟
如果设置了的话，模拟时两次迭代步之间的误差小于residualControl中的值，模拟就会停止 
设置方式如下：
SIMPLE
{
    nNonOrthogonalCorrectors 0;

    residualControl
    {
        p               1e-5;
        U               1e-5;
        nuTilda         1e-5;
    }
}
因此排除no conbergence criteria found的问题


接下来往下看问题出在哪里：
Using #codeStream at line 17 in file 这里是使用#codeStream指令，开始嵌入 C++ 代码，并在运行时动态编译和执行这些代码
使用位于 /home/cxy/OpenFOAM/cxy-9/run/Benchmark/cavity/dynamicCode/platforms/linux64GccDPInt32Opt/lib 的动态代码库 libcodeStream_b426f15a858369fedb8f56546088de67d738156a.so 这个库包含之前编译的或者现在需要编译的代码 到这里都没问题

接着创建库 Creating new library in "dynamicCode/_b426f15a858369fedb8f56546088de67d738156a/platforms/linux64GccDPInt32Opt/lib/libcodeStream_b426f15a858369fedb8f56546088de67d738156a.so"
这里是表示编译过程正在生成一个新的或更新的代码库来执行嵌入的 C++ 代码
接着开始编译 使用wmake开始编译 Invoking "wmake -s libso /home/cxy/OpenFOAM/cxy-9/run/Benchmark/cavity/dynamicCode/_b426f15a858369fedb8f56546088de67d738156a"
wmake libso /home/cxy/OpenFOAM/cxy-9/run/Benchmark/cavity/dynamicCode/_b426f15a858369fedb8f56546088de67d738156a
.so文件：动态链接库 wmkdep：代码依赖分析 ctoo编译 链接ld

codeStream : dictionary:"/home/cxy/OpenFOAM/cxy-9/run/Benchmark/cavity/0/u" master-only-reading:0
openfoam此时正在处理一个包含#codestream指令的字典文件
master-only-reading:0 是否只有主处理器负责读取数据，并且分发给其他处理器（涉及到并行计算 感觉可以加decomposeParDict部分试验下 涉及到并行计算）
0的意思就是否的意思 
on processor 0 have masterSize:703200 and localSize:703200

on processor 0 after waiting: have masterSize:703200 and localSize:703200

这个masterSize和localSize很关键 需要703200=703200 masterSize是主处理器持有的数据集的大小  localSize是当前处理器的局部数据集的大小
on processor 0 after waiting: have masterSize:703200 and localSize:703200这个表示after waiting后他俩仍然相等 说明在这个处理器上预期读取的数据量和实际读取的数据量是一致的
满足了数据的完整性和稳定性 因此读取初场的时候没有出问题 ，出问题应该是在后面部分 
后面的两句Opening cached dictionary:"/home/cxy/OpenFOAM/cxy-9/run/Benchmark/cavity/dynamicCode/platforms/linux64GccDPInt32Opt/lib/libcodeStream_b426f15a858369fedb8f56546088de67d738156a.so"
codeStream : dictionary:"/home/cxy/OpenFOAM/cxy-9/run/Benchmark/cavity/0/u" master-only-reading:0
这里opening了一个已经编译并缓存的动态库，之前的步骤没有问题 
这里出现的master-only-reading：0和之前的意思一样，表示所有处理器都参与读取处理这个字典文件，因为这个是u的初场
读取c场过程和u场是一样的
并且on processor 0 have masterSize:698224 and localSize:698224

on processor 0 after waiting: have masterSize:698224 and localSize:698224
masterSize=localSize 说明c场这里也没问题 
所以问题是出在计算部分了 

3.计算部分出问题的环节 
出问题肯定是有限体积法计算的时候出问题了 
 FOAM FATAL ERROR: 

    [c[0 -2 0 0 0 0 0] ] - [((2*Q_s)*(((c-c_alpha)*pow((c_beta-c),2))-(pow((c-c_alpha),2)*(c_beta-c))))[0 0 0 0 0 0 0] ]

    From function void Foam::checkMethod(const Foam::fvMatrix<Type>&, const Foam::DimensionedField<Type, Foam::volMesh>&, const char*) [with Type = double]
    in file /home/cxy/OpenFOAM/OpenFOAM-9/src/finiteVolume/lnInclude/fvMatrix.C at line 1348.

字段运算中出现的问题，两个维度不匹配导致的 
[0 -2 0 0 0 0 0]这是面积的倒数 出现的问题在checkMethod这个函数这里  因此需要结合以下部分去查看
结合以下的absorting部分来看 aborting就是自动终止的跟踪信息
第一行是Foam::error::printStack(Foam::Ostream&) - 这是在错误发生时调用的函数
第二行是Foam::error::abort() at ??:? 这个检测到错误后直接导致函数终止
第三行是 void Foam::checkMethod<double>(Foam::fvMatrix<double> const&, Foam::DimensionedField<double, Foam::volMesh> const&, char const*) in "/home/cxy/OpenFOAM/cxy-9/platforms/linux64GccDPInt32Opt/bin/mySolverFoam"问题出在自定义求解器检查条件时出现的问题 DimensionedField
checkMethod 去找到checkMethod看看是怎么出问题的
接下来的两行#3  ? in "/home/cxy/OpenFOAM/cxy-9/platforms/linux64GccDPInt32Opt/bin/mySolverFoam"
                   #4  ? in "/home/cxy/OpenFOAM/cxy-9/platforms/linux64GccDPInt32Opt/bin/mySolverFoam"
mySolverFoam说明问题还是出现在求解器里面 求解器写得有问题
mySolverFoam里面的问题导致了接下来的：
#5  ? in "/lib/x86_64-linux-gnu/libc.so.6"
#6  __libc_start_main in "/lib/x86_64-linux-gnu/libc.so.6"
#7  ? in "/home/cxy/OpenFOAM/cxy-9/platforms/linux64GccDPInt32Opt/bin/mySolverFoam"
包括内存访问错误、不当的 API 调用
Foam::checkMethod<double>位于in file /home/cxy/OpenFOAM/OpenFOAM-9/src/finiteVolume/lnInclude/fvMatrix.C at line 1348


分析这段代码：这段代码是做维度检查的 检查fvMatrix和DimensionedField的维度是不是一致
template<class Type>
void Foam::checkMethod
(
    const fvMatrix<Type>& fvm,
    const DimensionedField<Type, volMesh>& df,
    const char* op
)
{
    if (dimensionSet::debug && fvm.dimensions()/dimVolume != df.dimensions())
    {
        FatalErrorInFunction
            << endl << "    "
            << "[" << fvm.psi().name() << fvm.dimensions()/dimVolume << " ] "
            << op
            << " [" << df.name() << df.dimensions() << " ]"
            << abort(FatalError);
    }
}
fvMatrix<Type>& fvm有限体积矩阵 就是离散后的偏微分方程 
DimensionedField<Type, volMesh>& df这个代表的是定义在体积网格上的场 
const char* op表示正在操作的字符串 
const 这些都定义为常量 不做任何修改 只是检查
dimensionSet::debug表示开始进行维度检查 fvm.dimensions()/dimVolume != df.dimensions()
fvm.dimensions()/dimVolume这个是在计算 fvMatrix 相对于体积单位的维度
这里是个除号 dimVolume是个特定的维度单位，用于表示体积的维度 通常为 [0 3 0 0 0 0 0] 单位就是L的三次方
长度的三次方 
df.dimensions()获取DimensionedField的维度 这个应该与 fvMatrix 除以体积后的维度相等 
如果他俩不一样的话就会触发FatalErrorInFunction 
首先输出一行错误信息，然后是 fvMatrix 和 DimensionedField 的名称及其维度信息 接着是进行的操作（op）最后调用 abort(FatalError) 终止程序
举个例子
[c[0 -2 0 0 0 0 0] ] - [((2*Q_s)*(((c-c_alpha)*pow((c_beta-c),2))-(pow((c-c_alpha),2)*(c_beta-c))))[0 0 0 0 0 0 0] ]
左边就是fvMatrix的维度信息 右边就是DimensionedFiled的维度 中间就是c进行的操作 
fvm.psi().name() << fvm.dimensions()/dimVolume fvm离散的维度 其中psi（）是返回与 fvMatrix 相关联的场
op即是进行的操作
df.name() << df.dimensions() 场的维度 
后面的((2*Q_s)*(((c-c_alpha)*pow((c_beta-c),2))-(pow((c-c_alpha),2)*(c_beta-c))))就是u换元的前一部分
dfchem/dc
为什么c会和u的第一部分进行运算呢？
有量纲的c和无量纲的u的第一部分进行 运算明显是无意义的 

使用gdb来调试

前置工作： ofextension
wmake | tee log.wmake
这条命令的意思是使用 wmake 编译代码，并将编译过程中的输出同时保存到名为 log.make 的文件中，同时也在终端上显示编译过程中的输出。 tee 命令会将 wmake 命令的输出复制到标准输出（终端）和指定的文件（log.make）中。
可以这么加
首先重新创建solver文件 mkdir -r solver这个文件和mySolverFoam在同一路径中
然后复制mySolverFoam到solver里去
接着是修改make files文件和option文件
option加一行-g \
files文件之前就改过了 不需要继续改
然后重新wmake一次
cp $FOAM_SOLVERS/incompressible/icoFoam -r .
cd icoFoam
cp $FOAM_TUTORIALS/incompressible/icoFoam/cavity/cavity -r debug_case
cd debug_case #进行网格初始化
blockMesh | tee log.blockMesh
包括wmake的时候也可以这么写 
wmake | tee log.wmake
这里debug文件里面存cavity案例，但是不需要存在cavity文件下 ，rmdir cavity需要删掉cavity这个文件






